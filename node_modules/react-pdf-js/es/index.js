/**
 * @class ReactPdfJs
 */
import PdfJsLib from 'pdfjs-dist';
import PropTypes from 'prop-types';
import React, { useState, useEffect, useRef } from 'react';

var usePrevious = function usePrevious(value) {
  var ref = useRef();
  useEffect(function () {
    ref.current = value;
  });
  return ref.current;
};

export var ReactPdfJs = function ReactPdfJs(_ref) {
  var file = _ref.file,
      onDocumentComplete = _ref.onDocumentComplete,
      scale = _ref.scale,
      rotate = _ref.rotate,
      page = _ref.page,
      cMapUrl = _ref.cMapUrl,
      cMapPacked = _ref.cMapPacked,
      className = _ref.className,
      workerSrc = _ref.workerSrc;

  var _useState = useState(null),
      pdf = _useState[0],
      setPdf = _useState[1];

  var canvasEl = useRef(null);

  // do our initial setup
  useEffect(function () {
    PdfJsLib.GlobalWorkerOptions.workerSrc = workerSrc;
    var loadingTask = PdfJsLib.getDocument({ url: file, cMapUrl: cMapUrl, cMapPacked: cMapPacked });
    loadingTask.promise.then(function (document) {
      setPdf(document);
      if (onDocumentComplete) {
        onDocumentComplete(document._pdfInfo.numPages); // eslint-disable-line
      }
      document.getPage(page).then(function (p) {
        return drawPDF(p);
      });
    });
  }, []);

  // see if anything has changed
  var oldPage = usePrevious(page);
  var oldScale = usePrevious(scale);
  var oldRotate = usePrevious(rotate);
  useEffect(function () {
    if (pdf && (oldPage !== page || oldScale !== scale || oldRotate !== rotate)) {
      pdf.getPage(page).then(function (p) {
        return drawPDF(p);
      });
    }
  }, [page, scale, rotate]);

  // draw a page of the pdf
  var drawPDF = function drawPDF(page) {
    // Because this page's rotation option overwrites pdf default rotation value,
    // calculating page rotation option value from pdf default and this component prop rotate.
    var rotation = rotate === 0 ? page.rotate : page.rotate + rotate;
    var viewport = page.getViewport({ scale: scale, rotation: rotation });
    var canvas = canvasEl.current;
    var canvasContext = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;
    var renderContext = {
      canvasContext: canvasContext,
      viewport: viewport
    };
    page.render(renderContext);
  };

  return React.createElement('canvas', { ref: canvasEl, className: className });
};

ReactPdfJs.propTypes = process.env.NODE_ENV !== "production" ? {
  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
  page: PropTypes.number,
  onDocumentComplete: PropTypes.func,
  scale: PropTypes.number,
  rotate: PropTypes.oneOf([0, 90, 180, 270]),
  cMapUrl: PropTypes.string,
  cMapPacked: PropTypes.bool,
  className: PropTypes.string,
  workerSrc: PropTypes.string
} : {};

ReactPdfJs.defaultProps = {
  page: 1,
  onDocumentComplete: null,
  scale: 1,
  rotate: 0,
  cMapUrl: '../node_modules/pdfjs-dist/cmaps/',
  cMapPacked: false,
  className: '',
  workerSrc: '//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.1.266/pdf.worker.js'
};

export default ReactPdfJs;